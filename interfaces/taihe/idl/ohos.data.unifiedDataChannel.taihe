/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@!namespace("@ohos.data.unifiedDataChannel", "unifiedDataChannel")

@!sts_inject_into_module("import { BusinessError, AsyncCallback } from '@ohos.base';")

@!sts_inject_into_module("import Want from '@ohos.app.ability.Want';")
 
@!sts_inject_into_module("import image from '@ohos.multimedia.image';")

@!sts_inject("""
static { loadLibrary("udmf_taihe_native.z") }
""")

union ValueType {
  intType: i32;
  longType: i64;
  doubleType: f64;
  string: String;
  boolean: bool;
  ArrayBuffer: @arraybuffer Array<u8>;
  @null nullType;
  @undefined undefinedType;
  object: @sts_type("(image.PixelMap | Want | object)") Opaque;
}

union DetailsValue {
  intType: i32;
  longType: i64;
  doubleType: f64;
  string: String;
  Uint8Array: @typedarray Array<u8>;
}

union AllRecords {
  file: FileInner;
  folder: FolderInner;
  audio: AudioInner;
  video: VideoInner;
  image: ImageInner;
  text: TextInner;
  plainText: PlainTextInner;
  html: HTMLInner;
  hyperlink: HyperlinkInner;
  systemDefinedRecord: SystemDefinedRecordInner;
  systemDefinedForm: SystemDefinedFormInner;
  systemDefinedAppItem: SystemDefinedAppItemInner;
  systemDefinedPixelMap: SystemDefinedPixelMapInner;
  applicationDefinedRecord: ApplicationDefinedRecordInner;
  unifiedRecord: UnifiedRecordInner;
}

union UnifiedDataOrNull {
  unifiedData: @sts_type("UnifiedData") Opaque;
  @null nullType;
}

enum Intention: String {
  DATA_HUB = "DataHub",
  DRAG = "Drag"
}

enum ProgressIndicator: i32 {
  NONE = 0,
  DEFAULT = 1
}

enum ListenerStatus: i32 {
  FINISHED = 0,
  PROCESSING,
  CANCELED,
  INNER_ERROR = 200,
  INVALID_PARAMETERS,
  DATA_NOT_FOUND,
  SYNC_FAILED,
  COPY_FILE_FAILED
}

enum FileConflictOptions: i32 {
  OVERWRITE = 0,
  SKIP = 1
}

struct Options {
  intention: Optional<Intention>;
  key: Optional<String>;
}

@class
interface Summary {
  @get("totalSize")
  GetTotalSize(): i64;
  @get("summary")
  GetSummary(): @record Map<String, i64>;
  GetInner(): i64;
}

@ctor("Summary")
function CreateSummary(): Summary;

struct ProgressInfo {
  progress: i32;
  status: ListenerStatus;
}

struct GetDataParams {
  progressIndicator: ProgressIndicator;
  dataProgressListener: (progressInfo: ProgressInfo, data: UnifiedDataOrNull) => void;
  destUri: Optional<String>;
  fileConflictOptions: Optional<FileConflictOptions>;
}

@class
interface UnifiedDataInner {
  AddRecord(unifiedRecord: AllRecords): void;
  GetRecords(): Array<AllRecords>;
  GetInner(): i64;
}

function CreateUnifiedData(): UnifiedDataInner;

function CreateUnifiedDataWithParams(unifiedRecord: AllRecords): UnifiedDataInner;

@class
interface UnifiedRecordInner {
  GetType(): String;
  GetValue(): ValueType;
  GetInner(): i64;
}

function CreateUnifiedRecord(): UnifiedRecordInner;

function CreateUnifiedRecordWithParams(type: String, value: ValueType): UnifiedRecordInner;

@class
interface FileInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("uri")
  GetUri(): String;
  @set("uri")
  SetUri(uri: String): void;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  GetInner(): i64;
}

function CreateUnifiedFile(): FileInner;

@class
interface FolderInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("uri")
  GetUri(): String;
  @set("uri")
  SetUri(uri: String): void;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  @get("folderUri")
  GetFolderUri(): String;
  @set("folderUri")
  SetFolderUri(folderUri: String): void;
  GetInner(): i64;
}

function CreateUnifiedFolder(): FolderInner;

@class
interface AudioInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("uri")
  GetUri(): String;
  @set("uri")
  SetUri(uri: String): void;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  @get("audioUri")
  GetAudioUri(): String;
  @set("audioUri")
  SetAudioUri(audioUri: String): void;
  GetInner(): i64;
}

function CreateUnifiedAudio(): AudioInner;

@class
interface VideoInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("uri")
  GetUri(): String;
  @set("uri")
  SetUri(uri: String): void;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  @get("videoUri")
  GetVideoUri(): String;
  @set("videoUri")
  SetVideoUri(videoUri: String): void;
  GetInner(): i64;
}

function CreateUnifiedVideo(): VideoInner;

@class
interface ImageInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("uri")
  GetUri(): String;
  @set("uri")
  SetUri(uri: String): void;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  @get("imageUri")
  GetImageUri(): String;
  @set("imageUri")
  SetImageUri(imageUri: String): void;
  GetInner(): i64;
}

function CreateUnifiedImage(): ImageInner;

@class
interface TextInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  GetInner(): i64;
}

function CreateText(): TextInner;

@class
interface HTMLInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  @set("htmlContent")
  SetHtmlContent(htmlContent: String): void;
  @get("htmlContent")
  GetHtmlContent(): String;
  @set("plainContent")
  SetPlainContent(plainContent: String): void;
  @get("plainContent")
  GetPlainContent(): String;
  GetInner(): i64;
}

function CreateHtml(): HTMLInner;

@class
interface HyperlinkInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  @set("url")
  SetUrl(url: String): void;
  @get("url")
  GetUrl(): String;
  @set("description")
  SetDescription(description: String): void;
  @get("description")
  GetDescription(): String;
  GetInner(): i64;
}

function CreateHyperlink(): HyperlinkInner;

@class
interface PlainTextInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  @set("textContent")
  SetTextContent(textContent: String): void;
  @get("textContent")
  GetTextContent(): String;
  @set("textAbstract")
  SetTextAbstract(textAbstract: String): void;
  @get("textAbstract")
  GetTextAbstract(): String;
  GetInner(): i64;
}

function CreatePlainText(): PlainTextInner;


@class
interface SystemDefinedRecordInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("details")
  GetDetails(): Optional<@record Map<String, DetailsValue>>;
  @set("details")
  SetDetails(details: @record Map<String, DetailsValue>): void;
  GetInner(): i64;
}

function CreateSystemDefinedRecord(): SystemDefinedRecordInner;

@class
interface SystemDefinedFormInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("details")
  GetDetails(): Optional<@record Map<String, DetailsValue>>;
  @set("details")
  SetDetails(details: @record Map<String, DetailsValue>): void;
  @get("formId")
  GetFormId(): i32;
  @set("formId")
  SetFormId(formId: i32): void;
  @get("formName")
  GetFormName(): String;
  @set("formName")
  SetFormName(formName: String): void;
  @get("bundleName")
  GetBundleName(): String;
  @set("bundleName")
  SetBundleName(bundleName: String): void;
  @get("abilityName")
  GetAbilityName(): String;
  @set("abilityName")
  SetAbilityName(abilityName: String): void;
  @get("module")
  GetModule(): String;
  @set("module")
  SetModule(module: String): void;
  GetInner(): i64;
}

function CreateSystemDefinedForm(): SystemDefinedFormInner;

@class
interface SystemDefinedAppItemInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("details")
  GetDetails(): Optional<@record Map<String, DetailsValue>>;
  @set("details")
  SetDetails(details: @record Map<String, DetailsValue>): void;
  @get("appId")
  GetAppId(): String;
  @set("appId")
  SetAppId(appId: String): void;
  @get("appName")
  GetAppName(): String;
  @set("appName")
  SetAppName(appName: String): void;
  @get("appIconId")
  GetAppIconId(): String;
  @set("appIconId")
  SetAppIconId(appIconId: String): void;
  @get("appLabelId")
  GetAppLabelId(): String;
  @set("appLabelId")
  SetAppLabelId(appLabelId: String): void;
  @get("bundleName")
  GetBundleName(): String;
  @set("bundleName")
  SetBundleName(bundleName: String): void;
  @get("abilityName")
  GetAbilityName(): String;
  @set("abilityName")
  SetAbilityName(abilityName: String): void;
  GetInner(): i64;
}

function CreateSystemDefinedAppItem(): SystemDefinedAppItemInner;

@class
interface SystemDefinedPixelMapInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("details")
  GetDetails(): Optional<@record Map<String, DetailsValue>>;
  @set("details")
  SetDetails(details: @record Map<String, DetailsValue>): void;
  @get("rawData")
  GetRawData(): Optional<@typedarray Array<u8>>;
  @set("rawData")
  SetRawData(rawData: @typedarray Array<u8>): void;
  GetInner(): i64;
}

function CreateSystemDefinedPixelMap(): SystemDefinedPixelMapInner;

@class
interface ApplicationDefinedRecordInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("applicationDefinedType")
  GetApplicationDefinedType(): String;
  @set("applicationDefinedType")
  SetApplicationDefinedType(applicationDefinedType: String): void;
  @get("rawData")
  GetRawData(): Optional<@typedarray Array<u8>>;
  @set("rawData")
  SetRawData(rawData: @typedarray Array<u8>): void;
  GetInner(): i64;
}

function createApplicationDefinedRecord(): ApplicationDefinedRecordInner;

function InsertDataSync(options: Options, data: UnifiedDataInner): String;
function QueryDataSync(options: Options): Array<UnifiedDataInner>;

@!sts_inject("""

export class UnifiedData {
  inner: UnifiedDataInner;
  getInner(): long {
    return this.inner.getInner();
  }
  constructor() {
    this.inner = createUnifiedData();
  }
  constructor(inner: UnifiedDataInner) {
    this.inner = inner;
  }
  constructor(unifiedRecord: UnifiedRecord) {
    if (unifiedRecord instanceof Folder) {
      this.inner = createUnifiedDataWithParams((unifiedRecord as Folder).inner);
    } else if (unifiedRecord instanceof Audio) {
      this.inner = createUnifiedDataWithParams((unifiedRecord as Audio).inner);
    } else if (unifiedRecord instanceof Video) {
      this.inner = createUnifiedDataWithParams((unifiedRecord as Video).inner);
    } else if (unifiedRecord instanceof Image) {
      this.inner = createUnifiedDataWithParams((unifiedRecord as Image).inner);
    } else if (unifiedRecord instanceof PlainText) {
      this.inner = createUnifiedDataWithParams((unifiedRecord as PlainText).inner);
    } else if (unifiedRecord instanceof HTML) {
      this.inner = createUnifiedDataWithParams((unifiedRecord as HTML).inner);
    } else if (unifiedRecord instanceof Hyperlink) {
      this.inner = createUnifiedDataWithParams((unifiedRecord as Hyperlink).inner);
    } else if (unifiedRecord instanceof SystemDefinedForm) {
      this.inner = createUnifiedDataWithParams((unifiedRecord as SystemDefinedForm).inner);
    } else if (unifiedRecord instanceof SystemDefinedAppItem) {
      this.inner = createUnifiedDataWithParams((unifiedRecord as SystemDefinedAppItem).inner);
    } else if (unifiedRecord instanceof SystemDefinedPixelMap) {
      this.inner = createUnifiedDataWithParams((unifiedRecord as SystemDefinedPixelMap).inner);
    } else if (unifiedRecord instanceof Text) {
      this.inner = createUnifiedDataWithParams((unifiedRecord as Text).inner);
    } else if (unifiedRecord instanceof File) {
      this.inner = createUnifiedDataWithParams((unifiedRecord as File).inner);
    } else if (unifiedRecord instanceof SystemDefinedRecord) {
      this.inner = createUnifiedDataWithParams((unifiedRecord as SystemDefinedRecord).inner);
    } else if (unifiedRecord instanceof ApplicationDefinedRecord) {
      this.inner = createUnifiedDataWithParams((unifiedRecord as ApplicationDefinedRecord).inner);
    } else if (unifiedRecord instanceof UnifiedRecord) {
      this.inner = createUnifiedDataWithParams((unifiedRecord as UnifiedRecord).inner);
    }
  }
  addRecord(unifiedRecord: UnifiedRecord) {
    if (unifiedRecord instanceof Folder) {
      this.inner.addRecord((unifiedRecord as Folder).inner);
    } else if (unifiedRecord instanceof Audio) {
      this.inner.addRecord((unifiedRecord as Audio).inner);
    } else if (unifiedRecord instanceof Video) {
      this.inner.addRecord((unifiedRecord as Video).inner);
    } else if (unifiedRecord instanceof Image) {
      this.inner.addRecord((unifiedRecord as Image).inner);
    } else if (unifiedRecord instanceof PlainText) {
      this.inner.addRecord((unifiedRecord as PlainText).inner);
    } else if (unifiedRecord instanceof HTML) {
      this.inner.addRecord((unifiedRecord as HTML).inner);
    } else if (unifiedRecord instanceof Hyperlink) {
      this.inner.addRecord((unifiedRecord as Hyperlink).inner);
    } else if (unifiedRecord instanceof SystemDefinedForm) {
      this.inner.addRecord((unifiedRecord as SystemDefinedForm).inner);
    } else if (unifiedRecord instanceof SystemDefinedAppItem) {
      this.inner.addRecord((unifiedRecord as SystemDefinedAppItem).inner);
    } else if (unifiedRecord instanceof SystemDefinedPixelMap) {
      this.inner.addRecord((unifiedRecord as SystemDefinedPixelMap).inner);
    } else if (unifiedRecord instanceof Text) {
      this.inner.addRecord((unifiedRecord as Text).inner);
    } else if (unifiedRecord instanceof File) {
      this.inner.addRecord((unifiedRecord as File).inner);
    } else if (unifiedRecord instanceof SystemDefinedRecord) {
      this.inner.addRecord((unifiedRecord as SystemDefinedRecord).inner);
    } else if (unifiedRecord instanceof ApplicationDefinedRecord) {
      this.inner.addRecord((unifiedRecord as ApplicationDefinedRecord).inner);
    } else if (unifiedRecord instanceof UnifiedRecord) {
      this.inner.addRecord((unifiedRecord as UnifiedRecord).inner);
    }
  }
  getRecords(): Array<UnifiedRecord> {
    let records = this.inner.getRecords();
    let arr: Array<UnifiedRecord> = new Array<UnifiedRecord>();
    for (let i = 0; i < records.length; i++ ) {
      if (records[i] instanceof UnifiedRecordInner) {
        arr.push(new UnifiedRecord(records[i] as UnifiedRecordInner));
      } else if (records[i] instanceof FileInner) {
        arr.push(new File(records[i] as FileInner));
      } else if (records[i] instanceof FolderInner) {
        arr.push(new Folder(records[i] as FolderInner));
      } else if (records[i] instanceof AudioInner) {
        arr.push(new Audio(records[i] as AudioInner));
      } else if (records[i] instanceof VideoInner) {
        arr.push(new Video(records[i] as VideoInner));
      } else if (records[i] instanceof ImageInner) {
        arr.push(new Image(records[i] as ImageInner));
      } else if (records[i] instanceof TextInner) {
        arr.push(new Text(records[i] as TextInner));
      } else if (records[i] instanceof PlainTextInner) {
        arr.push(new PlainText(records[i] as PlainTextInner));
      } else if (records[i] instanceof HTMLInner) {
        arr.push(new HTML(records[i] as HTMLInner));
      } else if (records[i] instanceof HyperlinkInner) {
        arr.push(new Hyperlink(records[i] as HyperlinkInner));
      } else if (records[i] instanceof SystemDefinedRecordInner) {
        arr.push(new SystemDefinedRecord(records[i] as SystemDefinedRecordInner));
      } else if (records[i] instanceof SystemDefinedFormInner) {
        arr.push(new SystemDefinedForm(records[i] as SystemDefinedFormInner));
      } else if (records[i] instanceof SystemDefinedAppItemInner) {
        arr.push(new SystemDefinedAppItem(records[i] as SystemDefinedAppItemInner));
      } else if (records[i] instanceof SystemDefinedPixelMapInner) {
        arr.push(new SystemDefinedPixelMap(records[i] as SystemDefinedPixelMapInner));
      } else if (records[i] instanceof ApplicationDefinedRecordInner) {
        arr.push(new ApplicationDefinedRecord(records[i] as ApplicationDefinedRecordInner));
      }
    }
    return arr;
  }
}

export class UnifiedRecord {
  inner: UnifiedRecordInner;
  constructor() {
    this.inner = createUnifiedRecord();
  }
  constructor(inner: UnifiedRecordInner) {
    this.inner = inner;
  }

  constructor(type: string, value: ValueType) {
    this.inner = createUnifiedRecordWithParams(type, value);
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
}

export class File extends UnifiedRecord {
  inner: FileInner;
  constructor() {
    this.inner = createUnifiedFile();
  }
  constructor(inner: FileInner) {
    this.inner = inner;
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  getType(): string {
    return this.inner.getType();
  }
  get details(): Record<String, String> | undefined {
    return this.inner.details;
  }
  set details(details: Record<String, String>) {
    this.inner.details = details;
  }
  get uri(): string {
    return this.inner.uri;
  }
  set uri(uri: string) {
    this.inner.uri = uri;
  }
}

export class Folder extends File {
  inner: FolderInner;
  constructor() {
    this.inner = createUnifiedFolder();
  }
  constructor(inner: FolderInner) {
    this.inner = inner;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  get uri(): string {
    return this.inner.uri;
  }
  set uri(uri: string) {
    this.inner.uri = uri;
  }
  get details(): Record<String, String> | undefined {
    return this.inner.details;
  }
  set details(details: Record<String, String>) {
    this.inner.details = details;
  }
  get folderUri(): string {
    return this.inner.folderUri;
  }
  set folderUri(folderUri: string) {
    this.inner.folderUri = folderUri;
  }
}

export class Audio extends File {
  inner: AudioInner;
  constructor() {
    this.inner = createUnifiedAudio();
  }
  constructor(inner: AudioInner) {
    this.inner = inner;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  get uri(): string {
    return this.inner.uri;
  }
  set uri(uri: string) {
    this.inner.uri = uri;
  }
  get details(): Record<String, String> | undefined {
    return this.inner.details;
  }
  set details(details: Record<String, String>) {
    this.inner.details = details;
  }
  get audioUri(): string {
    return this.inner.audioUri;
  }
  set audioUri(audioUri: string) {
    this.inner.audioUri = audioUri;
  }
}

export class Video extends File {
  inner: VideoInner;
  constructor() {
    this.inner = createUnifiedVideo();
  }
  constructor(inner: VideoInner) {
    this.inner = inner;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  get uri(): string {
    return this.inner.uri;
  }
  set uri(uri: string) {
    this.inner.uri = uri;
  }
  get details(): Record<String, String> | undefined {
    return this.inner.details;
  }
  set details(details: Record<String, String>) {
    this.inner.details = details;
  }
  get videoUri(): string {
    return this.inner.videoUri;
  }
  set videoUri(videoUri: string) {
    this.inner.videoUri = videoUri;
  }
}

export class Image extends File {
  inner: ImageInner;
  constructor() {
    this.inner = createUnifiedImage();
  }
  constructor(inner: ImageInner) {
    this.inner = inner;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  get uri(): string {
    return this.inner.uri;
  }
  set uri(uri: string) {
    this.inner.uri = uri;
  }
  get details(): Record<String, String> | undefined {
    return this.inner.details;
  }
  set details(details: Record<String, String>) {
    this.inner.details = details;
  }
  get imageUri(): string {
    return this.inner.imageUri;
  }
  set imageUri(imageUri: string) {
    this.inner.imageUri = imageUri;
  }
}

export class Text extends UnifiedRecord {
  inner: TextInner;
  constructor() {
    this.inner = createText();
  }
  constructor(inner: TextInner) {
    this.inner = inner;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  get details(): Record<string, string>| undefined {
    return this.inner.details;
  }
  set details(info: Record<string, string>) {
    this.inner.details = info;
  }
}

export class PlainText extends Text {
  inner: PlainTextInner;
  constructor() {
    this.inner = createPlainText();
  }
  constructor(inner: PlainTextInner) {
    this.inner = inner;
  }
  get details(): Record<string, string>| undefined {
    return this.inner.details;
  }
  set details(info: Record<string, string>) {
    this.inner.details = info;
  }
  get textContent(): string {
    return this.inner.textContent;
  }
  set textContent(text: string) {
    this.inner.textContent = text;
  }
  get textAbstract(): string {
    return this.inner.textAbstract;
  }
  set textAbstract(textAbstract: string) {
    this.inner.textAbstract = textAbstract;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
}

export class HTML extends Text {
  inner: HTMLInner;
  constructor() {
    this.inner = createHtml();
  }
  constructor(inner: HTMLInner) {
    this.inner = inner;
  }
  get details(): Record<string, string>| undefined {
    return this.inner.details;
  }
  set details(info: Record<string, string>) {
    this.inner.details = info;
  }
  get htmlContent(): string {
    return this.inner.htmlContent;
  }
  set htmlContent(html: string) {
    this.inner.htmlContent = html;
  }
  get plainContent(): string {
    return this.inner.plainContent;
  }
  set plainContent(plain: string) {
    this.inner.plainContent = plain;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
}

export class Hyperlink extends Text {
  inner: HyperlinkInner;
  constructor() {
    this.inner = createHyperlink();
  }
  constructor(inner: HyperlinkInner) {
    this.inner = inner;
  }
  get details(): Record<string, string>| undefined {
    return this.inner.details;
  }
  set details(info: Record<string, string>) {
    this.inner.details = info;
  }
  get url(): string {
    return this.inner.url;
  }
  set url(url: string) {
    this.inner.url = url;
  }
  get description(): string {
    return this.inner.description;
  }
  set description(description: string) {
    this.inner.description = description;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
}

export class SystemDefinedRecord extends UnifiedRecord {
  inner: SystemDefinedRecordInner;
  constructor() {
    this.inner = createSystemDefinedRecord();
  }
  constructor(inner: SystemDefinedRecordInner) {
    this.inner = inner;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  get details(): Record<String, DetailsValue> | undefined {
    return this.inner.details;
  }
  set details(details: Record<String, DetailsValue>) {
    this.inner.details = details;
  }
}

export class SystemDefinedForm extends SystemDefinedRecord {
  inner: SystemDefinedFormInner;
  constructor() {
    this.inner = createSystemDefinedForm();
  }
  constructor(inner: SystemDefinedFormInner) {
    this.inner = inner;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  get details(): Record<String, DetailsValue> | undefined {
    return this.inner.details;
  }
  set details(details: Record<String, DetailsValue>) {
    this.inner.details = details;
  }
  get formId(): int {
    return this.inner.formId;
  }
  set formId(formId: int) {
    this.inner.formId = formId;
  }
  get formName(): String {
    return this.inner.formName;
  }
  set formName(formName: String) {
    this.inner.formName = formName;
  }
  get bundleName(): String {
    return this.inner.bundleName;
  }
  set bundleName(bundleName: String) {
    this.inner.bundleName = bundleName;
  }
  get abilityName(): String {
    return this.inner.abilityName;
  }
  set abilityName(abilityName: String) {
    this.inner.abilityName = abilityName;
  }
  get module(): String {
    return this.inner.module;
  }
  set module(module: String) {
    this.inner.module = module;
  }
}

export class SystemDefinedAppItem extends SystemDefinedRecord {
  inner: SystemDefinedAppItemInner;
  constructor() {
    this.inner = createSystemDefinedAppItem();
  }
  constructor(inner: SystemDefinedAppItemInner) {
    this.inner = inner;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  get details(): Record<String, DetailsValue> | undefined {
    return this.inner.details;
  }
  set details(details: Record<String, DetailsValue>) {
    this.inner.details = details;
  }
  get appId(): String {
    return this.inner.appId;
  }
  set appId(appId: String) {
    this.inner.appId = appId;
  }
  get appName(): String {
    return this.inner.appName;
  }
  set appName(appName: String) {
    this.inner.appName = appName;
  }
  get appIconId(): String {
    return this.inner.appIconId;
  }
  set appIconId(appIconId: String) {
    this.inner.appIconId = appIconId;
  }
  get appLabelId(): String {
    return this.inner.appLabelId;
  }
  set appLabelId(appLabelId: String) {
    this.inner.appLabelId = appLabelId;
  }
  get bundleName(): String {
    return this.inner.bundleName;
  }
  set bundleName(bundleName: String) {
    this.inner.bundleName = bundleName;
  }
  get abilityName(): String {
    return this.inner.abilityName;
  }
  set abilityName(abilityName: String) {
    this.inner.abilityName = abilityName;
  }
}

export class SystemDefinedPixelMap extends SystemDefinedRecord {
  inner: SystemDefinedPixelMapInner;
  constructor() {
    this.inner = createSystemDefinedPixelMap();
  }
  constructor(inner: SystemDefinedPixelMapInner) {
    this.inner = inner;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  get details(): Record<String, DetailsValue> | undefined {
    return this.inner.details;
  }
  set details(details: Record<String, DetailsValue>) {
    this.inner.details = details;
  }
  get rawData(): Uint8Array | undefined {
    return this.inner.rawData;
  }
  set rawData(rawData: Uint8Array) {
    this.inner.rawData = rawData;
  }
}

export class ApplicationDefinedRecord extends UnifiedRecord {
  inner: ApplicationDefinedRecordInner;
  constructor() {
    this.inner = createApplicationDefinedRecord();
  }
  constructor(inner: ApplicationDefinedRecordInner) {
    this.inner = inner;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  get applicationDefinedType(): String {
    return this.inner.applicationDefinedType;
  }
  set applicationDefinedType(applicationDefinedType: String) {
    this.inner.applicationDefinedType = applicationDefinedType;
  }
  get rawData(): Uint8Array | undefined {
    return this.inner.rawData;
  }
  set rawData(rawData: Uint8Array) {
    this.inner.rawData = rawData;
  }
}

export function insertData(options: Options, data: UnifiedData): Promise<string> {
    return new Promise<string>((resolve, reject): void => {
        taskpool.execute((): string => {
            return insertDataSync(options, data.inner);
        })
        .then((ret: Any): void => {
            resolve(ret as string);
        })
        .catch((ret: Any): void => {
            reject(ret as Error);
        });
    });
}

export function insertData(options: Options, data: UnifiedData, callback: AsyncCallback<string>): void {
    taskpool.execute((): string => {
        return insertDataSync(options, data.inner);
    })
    .then((ret: Any): void => {
        callback(new BusinessError(), ret as string);
    })
    .catch((ret: Any): void => {
        let data: string;
        callback(ret as BusinessError, data);
    });
}

export function queryData(options: Options): Promise<Array<UnifiedData>> {
    return new Promise<Array<UnifiedData>>((resolve, reject): void => {
        taskpool.execute((): Array<UnifiedData> => {
            let dataArray = queryDataSync(options);
            let arr: Array<UnifiedData> = new Array<UnifiedData>();
            for (let i = 0; i < dataArray.length; i++ ) {
              arr.push(new UnifiedData(dataArray[i]))
            }
            return arr;
        })
        .then((ret: Any): void => {
            resolve(ret as Array<UnifiedData>);
        })
        .catch((ret: Any): void => {
            reject(ret as Error);
        });
    });
}

export function queryData(options: Options, callback: AsyncCallback<Array<UnifiedData>>): void {
    taskpool.execute((): Array<UnifiedData> => {
        let dataArray = queryDataSync(options);
        let arr: Array<UnifiedData> = new Array<UnifiedData>();
        for (let i = 0; i < dataArray.length; i++ ) {
          arr.push(new UnifiedData(dataArray[i]))
        }
        return arr;
    })
    .then((ret: Any): void => {
        callback(new BusinessError(), ret as Array<UnifiedData>);
    })
    .catch((ret: Any): void => {
        let data: Array<UnifiedData>;
        callback(ret as BusinessError, data);
    });
}

class ProgressInfoInner implements ProgressInfo {
    progress: int;
    status: ListenerStatus;
    constructor(progress: int, status: ListenerStatus) {
        this.progress = progress;
        this.status = status;
    }
}

export function summaryTransferStatic(input: Any): object {
    return summaryTransferStaticImpl(ESValue.wrap(input));
}

export function summaryTransferDynamic(input: object): Any {
    return summaryTransferDynamicImpl(input as Summary);
}

export function systemDefinedFormTransferStatic(input: Any): object {
    let formInner = systemDefinedFormTransferStaticImpl(ESValue.wrap(input));
    return new SystemDefinedForm(formInner as SystemDefinedFormInner);
}

export function systemDefinedFormTransferDynamic(input: object): Any {
    return systemDefinedFormTransferDynamicImpl((input as SystemDefinedForm).inner);
}

export function systemDefinedRecordTransferStatic(input: Any): object {
    let recordInner = systemDefinedRecordTransferStaticImpl(ESValue.wrap(input));
    return new SystemDefinedRecord(recordInner as SystemDefinedRecordInner);
}

export function systemDefinedRecordTransferDynamic(input: object): Any {
    return systemDefinedRecordTransferDynamicImpl((input as SystemDefinedRecord).inner);
}

export function systemDefinedAppItemTransferStatic(input: Any): object {
    let appItemInner = systemDefinedAppItemTransferStaticImpl(ESValue.wrap(input));
    return new SystemDefinedAppItem(appItemInner as SystemDefinedAppItemInner);
}

export function systemDefinedAppItemTransferDynamic(input: object): Any {
    return systemDefinedAppItemTransferDynamicImpl((input as SystemDefinedAppItem).inner);
}

export function systemDefinedPixelMapTransferStatic(input: Any): object {
    let pixelMapInner = systemDefinedPixelMapTransferStaticImpl(ESValue.wrap(input));
    return new SystemDefinedPixelMap(pixelMapInner as SystemDefinedPixelMapInner);
}

export function systemDefinedPixelMapTransferDynamic(input: object): Any {
    return systemDefinedPixelMapTransferDynamicImpl((input as SystemDefinedPixelMap).inner);
}

export function applicationDefinedRecordTransferStatic(input: Any): object {
    let appInner = applicationDefinedRecordTransferStaticImpl(ESValue.wrap(input));
    return new ApplicationDefinedRecord(appInner as ApplicationDefinedRecordInner);
}

export function applicationDefinedRecordTransferDynamic(input: object): Any {
    return applicationDefinedRecordTransferDynamicImpl((input as ApplicationDefinedRecord).inner);
}
""")

function SummaryTransferStaticImpl(input: @sts_type("ESValue") Opaque): Summary;
function SummaryTransferDynamicImpl(input: Summary): @sts_type("Any") Opaque;

function SystemDefinedFormTransferStaticImpl(input: @sts_type("ESValue") Opaque): SystemDefinedFormInner;
function SystemDefinedFormTransferDynamicImpl(input: SystemDefinedFormInner): @sts_type("Any") Opaque;

function SystemDefinedRecordTransferStaticImpl(input: @sts_type("ESValue") Opaque): SystemDefinedRecordInner;
function SystemDefinedRecordTransferDynamicImpl(input: SystemDefinedRecordInner): @sts_type("Any") Opaque;

function SystemDefinedAppItemTransferStaticImpl(input: @sts_type("ESValue") Opaque): SystemDefinedAppItemInner;
function SystemDefinedAppItemTransferDynamicImpl(input: SystemDefinedAppItemInner): @sts_type("Any") Opaque;

function SystemDefinedPixelMapTransferStaticImpl(input: @sts_type("ESValue") Opaque): SystemDefinedPixelMapInner;
function SystemDefinedPixelMapTransferDynamicImpl(input: SystemDefinedPixelMapInner): @sts_type("Any") Opaque;

function ApplicationDefinedRecordTransferStaticImpl(input: @sts_type("ESValue") Opaque): ApplicationDefinedRecordInner;
function ApplicationDefinedRecordTransferDynamicImpl(input: ApplicationDefinedRecordInner): @sts_type("Any") Opaque;