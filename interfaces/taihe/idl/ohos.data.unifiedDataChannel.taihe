/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@!namespace("@ohos.data.unifiedDataChannel", "unifiedDataChannel")

@!sts_inject_into_module("import Want from '@ohos.app.ability.Want';")
 
@!sts_inject_into_module("import image from '@ohos.multimedia.image';")

@!sts_inject("""
static { loadLibrary("udmf_taihe_native.z") }
""")

union ValueType {
  number: f64;
  string: String;
  boolean: bool;
  ArrayBuffer: @arraybuffer Array<u8>;
  @null nullType;
  @undefined undefinedType;
  object: @sts_type("(image.PixelMap | Want | object)") Opaque;
}

union DetailsValue {
  number: f64;
  string: String;
  Uint8Array: @typedarray Array<u8>;
}

union AllRecords {
  file: FileInner;
  folder: FolderInner;
  audio: AudioInner;
  video: VideoInner;
  image: ImageInner;
  text: TextInner;
  plainText: PlainTextInner;
  html: HTMLInner;
  hyperlink: HyperlinkInner;
  unifiedRecord: UnifiedRecordInner;
}

union UnifiedDataOrNull {
  unifiedData: UnifiedData;
  @null nullType;
}

enum Intention: String {
  DATA_HUB = "DataHub",
  DRAG = "Drag"
}

enum ProgressIndicator: i32 {
  NONE = 0,
  DEFAULT = 1
}

enum ListenerStatus: i32 {
  FINISHED = 0,
  PROCESSING,
  CANCELED,
  INNER_ERROR = 200,
  INVALID_PARAMETERS,
  DATA_NOT_FOUND,
  SYNC_FAILED,
  COPY_FILE_FAILED
}

enum FileConflictOptions: i32 {
  OVERWRITE = 0,
  SKIP = 1
}

struct Options {
  intention: Optional<Intention>;
  key: Optional<String>;
}

@class
struct Summary {
  summary: @record Map<String, f64>;
  totalSize: f64;
}

function CreateSummary(): Summary;

struct ProgressInfo {
  progress: f64;
  status: ListenerStatus;
}

struct GetDataParams {
  progressIndicator: ProgressIndicator;
  dataProgressListener: (progressInfo: ProgressInfo, data: UnifiedDataOrNull) => void;
  destUri: Optional<String>;
  fileConflictOptions: Optional<FileConflictOptions>;
}

@class
interface UnifiedData {
  AddRecord1(unifiedRecord: AllRecords): void;
  
  GetRecords1(): Array<AllRecords>;
  @!sts_inject_into_class("""
  addRecord(unifiedRecord: UnifiedRecord) {
    if (unifiedRecord instanceof Folder) {
      this.addRecord1((unifiedRecord as Folder).inner);
    } else if (unifiedRecord instanceof Audio) {
      this.addRecord1((unifiedRecord as Audio).inner);
    } else if (unifiedRecord instanceof Video) {
      this.addRecord1((unifiedRecord as Video).inner);
    } else if (unifiedRecord instanceof Image) {
      this.addRecord1((unifiedRecord as Image).inner);
    } else if (unifiedRecord instanceof PlainText) {
      this.addRecord1((unifiedRecord as PlainText).inner);
    } else if (unifiedRecord instanceof HTML) {
      this.addRecord1((unifiedRecord as HTML).inner);
    } else if (unifiedRecord instanceof Hyperlink) {
      this.addRecord1((unifiedRecord as Hyperlink).inner);
    } else if (unifiedRecord instanceof Text) {
      this.addRecord1((unifiedRecord as Text).inner);
    } else if (unifiedRecord instanceof File) {
      this.addRecord1((unifiedRecord as File).inner);
    } else if (unifiedRecord instanceof UnifiedRecord) {
      this.addRecord1((unifiedRecord as UnifiedRecord).inner);
    }
  }
  getRecords(): Array<UnifiedRecord> {
    let records = this.getRecords1();
    let arr: Array<UnifiedRecord> = new Array<UnifiedRecord>();
    for (let i = 0; i < records.length; i++ ) {
       if (records[i] instanceof UnifiedRecordInner) {
        arr.push(new UnifiedRecord(records[i] as UnifiedRecordInner));
      } else if (records[i] instanceof FileInner) {
        arr.push(new File(records[i] as FileInner));
      } else if (records[i] instanceof FolderInner) {
        arr.push(new Folder(records[i] as FolderInner));
      } else if (records[i] instanceof AudioInner) {
        arr.push(new Audio(records[i] as AudioInner));
      } else if (records[i] instanceof VideoInner) {
        arr.push(new Video(records[i] as VideoInner));
      } else if (records[i] instanceof ImageInner) {
        arr.push(new Image(records[i] as ImageInner));
      } else if (records[i] instanceof TextInner) {
        arr.push(new Text(records[i] as TextInner));
      } else if (records[i] instanceof PlainTextInner) {
        arr.push(new PlainText(records[i] as PlainTextInner));
      } else if (records[i] instanceof HTMLInner) {
        arr.push(new HTML(records[i] as HTMLInner));
      } else if (records[i] instanceof HyperlinkInner) {
        arr.push(new Hyperlink(records[i] as HyperlinkInner));
      }
    }
    return arr;
  }
  """)
  GetInner(): i64;
}

@ctor("UnifiedData")
function CreateUnifiedData(): UnifiedData;

@ctor("UnifiedData")
function CreateUnifiedDataWithParams(unifiedRecord: AllRecords): UnifiedData;

@class
interface UnifiedRecordInner {
  GetType(): String;
  GetValue(): ValueType;
  GetInner(): i64;
}

@ctor("UnifiedRecordInner")
function CreateUnifiedRecord(): UnifiedRecordInner;

@ctor("UnifiedRecordInner")
function CreateUnifiedRecordWithParams(type: String, value: ValueType): UnifiedRecordInner;

@class
interface FileInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("uri")
  GetUri(): String;
  @set("uri")
  SetUri(uri: String): void;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  GetInner(): i64;
}

@ctor("FileInner")
function CreateUnifiedFile(): FileInner;

@class
interface FolderInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("uri")
  GetUri(): String;
  @set("uri")
  SetUri(uri: String): void;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  @get("folderUri")
  GetFolderUri(): String;
  @set("folderUri")
  SetFolderUri(folderUri: String): void;
  GetInner(): i64;
}

@ctor("FolderInner")
function CreateUnifiedFolder(): FolderInner;

@class
interface AudioInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("uri")
  GetUri(): String;
  @set("uri")
  SetUri(uri: String): void;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  @get("audioUri")
  GetAudioUri(): String;
  @set("audioUri")
  SetAudioUri(audioUri: String): void;
  GetInner(): i64;
}

@ctor("AudioInner")
function CreateUnifiedAudio(): AudioInner;

@class
interface VideoInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("uri")
  GetUri(): String;
  @set("uri")
  SetUri(uri: String): void;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  @get("videoUri")
  GetVideoUri(): String;
  @set("videoUri")
  SetVideoUri(videoUri: String): void;
  GetInner(): i64;
}

@ctor("VideoInner")
function CreateUnifiedVideo(): VideoInner;

@class
interface ImageInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("uri")
  GetUri(): String;
  @set("uri")
  SetUri(uri: String): void;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  @get("imageUri")
  GetImageUri(): String;
  @set("imageUri")
  SetImageUri(imageUri: String): void;
  GetInner(): i64;
}

@ctor("ImageInner")
function CreateUnifiedImage(): ImageInner;

@class
interface TextInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  GetInner(): i64;
}

@ctor("TextInner")
function CreateText(): TextInner;

@class
interface HTMLInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  @set("htmlContent")
  SetHtmlContent(htmlContent: String): void;
  @get("htmlContent")
  GetHtmlContent(): String;
  @set("plainContent")
  SetPlainContent(plainContent: String): void;
  @get("plainContent")
  GetPlainContent(): String;
  GetInner(): i64;
}

@ctor("HTMLInner")
function CreateHtml(): HTMLInner;

@class
interface HyperlinkInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  @set("url")
  SetUrl(url: String): void;
  @get("url")
  GetUrl(): String;
  @set("description")
  SetDescription(description: String): void;
  @get("description")
  GetDescription(): String;
  GetInner(): i64;
}

@ctor("HyperlinkInner")
function CreateHyperlink(): HyperlinkInner;

@class
interface PlainTextInner {
  GetType(): String;
  GetValue(): ValueType;
  @get("details")
  GetDetails(): Optional<@record Map<String, String>>;
  @set("details")
  SetDetails(details: @record Map<String, String>): void;
  @set("textContent")
  SetTextContent(textContent: String): void;
  @get("textContent")
  GetTextContent(): String;
  @set("abstract1")
  SetAbstract1(abstract1: String): void;
  @get("abstract1")
  GetAbstract1(): String;
  GetInner(): i64;
}

@ctor("PlainTextInner")
function CreatePlainText(): PlainTextInner;


@class
interface SystemDefinedRecord {
  GetType(): String;
  GetValue(): ValueType;
  @get("details")
  GetDetails(): Optional<@record Map<String, DetailsValue>>;
  @set("details")
  SetDetails(details: @record Map<String, DetailsValue>): void;
  GetInner(): i64;
}

@ctor("SystemDefinedRecord")
function CreateSystemDefinedRecord(): SystemDefinedRecord;

@class
interface SystemDefinedForm {
  GetType(): String;
  GetValue(): ValueType;
  @get("details")
  GetDetails(): Optional<@record Map<String, DetailsValue>>;
  @set("details")
  SetDetails(details: @record Map<String, DetailsValue>): void;
  @get("formId")
  GetFormId(): f64;
  @set("formId")
  SetFormId(formId: f64): void;
  @get("formName")
  GetFormName(): String;
  @set("formName")
  SetFormName(formName: String): void;
  @get("bundleName")
  GetBundleName(): String;
  @set("bundleName")
  SetBundleName(bundleName: String): void;
  @get("abilityName")
  GetAbilityName(): String;
  @set("abilityName")
  SetAbilityName(abilityName: String): void;
  @get("module")
  GetModule(): String;
  @set("module")
  SetModule(module: String): void;
  GetInner(): i64;
}

@ctor("SystemDefinedForm")
function CreateSystemDefinedForm(): SystemDefinedForm;

@class
interface SystemDefinedAppItem {
  GetType(): String;
  GetValue(): ValueType;
  @get("details")
  GetDetails(): Optional<@record Map<String, DetailsValue>>;
  @set("details")
  SetDetails(details: @record Map<String, DetailsValue>): void;
  @get("appId")
  GetAppId(): String;
  @set("appId")
  SetAppId(appId: String): void;
  @get("appName")
  GetAppName(): String;
  @set("appName")
  SetAppName(appName: String): void;
  @get("appIconId")
  GetAppIconId(): String;
  @set("appIconId")
  SetAppIconId(appIconId: String): void;
  @get("appLabelId")
  GetAppLabelId(): String;
  @set("appLabelId")
  SetAppLabelId(appLabelId: String): void;
  @get("bundleName")
  GetBundleName(): String;
  @set("bundleName")
  SetBundleName(bundleName: String): void;
  @get("abilityName")
  GetAbilityName(): String;
  @set("abilityName")
  SetAbilityName(abilityName: String): void;
  GetInner(): i64;
}

@ctor("SystemDefinedAppItem")
function CreateSystemDefinedAppItem(): SystemDefinedAppItem;

@class
interface SystemDefinedPixelMap {
  GetType(): String;
  GetValue(): ValueType;
  @get("details")
  GetDetails(): Optional<@record Map<String, DetailsValue>>;
  @set("details")
  SetDetails(details: @record Map<String, DetailsValue>): void;
  @get("rawData")
  GetRawData(): Optional<@typedarray Array<u8>>;
  @set("rawData")
  SetRawData(rawData: @typedarray Array<u8>): void;
  GetInner(): i64;
}

@ctor("SystemDefinedPixelMap")
function CreateSystemDefinedPixelMap(): SystemDefinedPixelMap;

@gen_async("insertData")
@gen_promise("insertData")
function InsertDataSync(options: Options, data: UnifiedData);

@gen_async("queryData")
@gen_promise("queryData")
function QueryDataSync(options: Options): Array<UnifiedData>;


@!sts_inject("""

export class UnifiedRecord {
  inner: UnifiedRecordInner;
  constructor() {
    this.inner = CreateUnifiedRecord_inner();
  }
  constructor(inner: UnifiedRecordInner) {
    this.inner = inner;
  }

  constructor(type: string, value: ValueType) {
    this.inner = CreateUnifiedRecordWithParams_inner(type, value);
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
}

export class File extends UnifiedRecord {
  inner: FileInner;
  constructor() {
    this.inner = CreateUnifiedFile_inner();
  }
  constructor(inner: FileInner) {
    this.inner = inner;
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  getType(): string {
    return this.inner.getType();
  }
  get uri(): string {
    return this.inner.uri;
  }
  set uri(uri: string) {
    this.inner.uri = uri;
  }
}

export class Folder extends File {
  inner: FolderInner;
  constructor() {
    this.inner = CreateUnifiedFolder_inner();
  }
  constructor(inner: FolderInner) {
    this.inner = inner;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  get uri(): string {
    return this.inner.uri;
  }
  set uri(uri: string) {
    this.inner.uri = uri;
  }
  get details(): Record<String, String> | undefined {
    return this.inner.details;
  }
  set details(details: Record<String, String>) {
    this.inner.details = details;
  }
  get folderUri(): string {
    return this.inner.folderUri;
  }
  set folderUri(folderUri: string) {
    this.inner.folderUri = folderUri;
  }
}

export class Audio extends File {
  inner: AudioInner;
  constructor() {
    this.inner = CreateUnifiedAudio_inner();
  }
  constructor(inner: AudioInner) {
    this.inner = inner;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  get uri(): string {
    return this.inner.uri;
  }
  set uri(uri: string) {
    this.inner.uri = uri;
  }
  get details(): Record<String, String> | undefined {
    return this.inner.details;
  }
  set details(details: Record<String, String>) {
    this.inner.details = details;
  }
  get audioUri(): string {
    return this.inner.audioUri;
  }
  set audioUri(audioUri: string) {
    this.inner.audioUri = audioUri;
  }
}

export class Video extends File {
  inner: VideoInner;
  constructor() {
    this.inner = CreateUnifiedVideo_inner();
  }
  constructor(inner: VideoInner) {
    this.inner = inner;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  get uri(): string {
    return this.inner.uri;
  }
  set uri(uri: string) {
    this.inner.uri = uri;
  }
  get details(): Record<String, String> | undefined {
    return this.inner.details;
  }
  set details(details: Record<String, String>) {
    this.inner.details = details;
  }
  get videoUri(): string {
    return this.inner.videoUri;
  }
  set videoUri(videoUri: string) {
    this.inner.videoUri = videoUri;
  }
}

export class Image extends File {
  inner: ImageInner;
  constructor() {
    this.inner = CreateUnifiedImage_inner();
  }
  constructor(inner: ImageInner) {
    this.inner = inner;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  get uri(): string {
    return this.inner.uri;
  }
  set uri(uri: string) {
    this.inner.uri = uri;
  }
  get details(): Record<String, String> | undefined {
    return this.inner.details;
  }
  set details(details: Record<String, String>) {
    this.inner.details = details;
  }
  get imageUri(): string {
    return this.inner.imageUri;
  }
  set imageUri(imageUri: string) {
    this.inner.imageUri = imageUri;
  }
}

export class Text extends UnifiedRecord {
  inner: TextInner;
  constructor() {
    this.inner = CreateText_inner();
  }
  constructor(inner: TextInner) {
    this.inner = inner;
  }
  getType(): string {
    return this.inner.getType();
  }
  getValue(): ValueType {
    return this.inner.getValue();
  }
  get details(): Record<string, string>| undefined {
    return this.inner.details;
  }
  set details(info: Record<string, string>) {
    this.inner.details = info;
  }
}

export class PlainText extends Text {
  inner: PlainTextInner;
  constructor() {
    this.inner = CreatePlainText_inner();
  }
  constructor(inner: PlainTextInner) {
    this.inner = inner;
  }
  get details(): Record<string, string>| undefined {
    return this.inner.details;
  }
  set details(info: Record<string, string>) {
    this.inner.details = info;
  }

  get textContent(): string {
    return this.inner.textContent;
  }

  set textContent(text: string) {
    this.inner.textContent = text;
  }

  get abstract1(): string {
    return this.inner.abstract1;
  }

  set abstract1(text: string) {
    this.inner.abstract1 = text;
  }

  getType(): string {
    return this.inner.getType();
  }

  getValue(): ValueType {
    return this.inner.getValue();
  }
}

export class HTML extends Text {
  inner: HTMLInner;
  constructor() {
    this.inner = CreateHtml_inner();
  }
  constructor(inner: HTMLInner) {
    this.inner = inner;
  }
  get details(): Record<string, string>| undefined {
    return this.inner.details;
  }
  set details(info: Record<string, string>) {
    this.inner.details = info;
  }

  get htmlContent(): string {
    return this.inner.htmlContent;
  }

  set htmlContent(html: string) {
    this.inner.htmlContent = html;
  }

  get plainContent(): string {
    return this.inner.plainContent;
  }

  set plainContent(plain: string) {
    this.inner.plainContent = plain;
  }

  getType(): string {
    return this.inner.getType();
  }

  getValue(): ValueType {
    return this.inner.getValue();
  }
}

export class Hyperlink extends Text {
  inner: HyperlinkInner;
  constructor() {
    this.inner = CreateHyperlink_inner();
  }
  constructor(inner: HyperlinkInner) {
    this.inner = inner;
  }
  get details(): Record<string, string>| undefined {
    return this.inner.details;
  }
  set details(info: Record<string, string>) {
    this.inner.details = info;
  }

  get url(): string {
    return this.inner.url;
  }

  set url(url: string) {
    this.inner.url = url;
  }

  get description(): string {
    return this.inner.description;
  }

  set description(description: string) {
    this.inner.description = description;
  }

  getType(): string {
    return this.inner.getType();
  }

  getValue(): ValueType {
    return this.inner.getValue();
  }
}
""")